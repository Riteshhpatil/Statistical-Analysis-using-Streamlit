{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3de4f36d-0800-4b69-8d94-78d1d3266ef9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "requirements.txt has been created!\n"
     ]
    }
   ],
   "source": [
    "# List of dependencies for your Streamlit app\n",
    "dependencies = [\n",
    "    \"streamlit==1.32.0\",         # Streamlit version\n",
    "    \"pandas==2.2.1\",            # Pandas version\n",
    "    \"matplotlib==3.8.3\",        # Matplotlib version\n",
    "    \"seaborn==0.13.2\",          # Seaborn version\n",
    "    \"plotly==5.20.0\",           # Plotly version (includes plotly.express)\n",
    "    \"scipy==1.12.0\",            # SciPy version\n",
    "    \"statsmodels==0.14.1\"       # Statsmodels version\n",
    "]\n",
    "\n",
    "# Write the dependencies to requirements.txt\n",
    "with open(\"requirements.txt\", \"w\") as f:\n",
    "    for dep in dependencies:\n",
    "        f.write(f\"{dep}\\n\")\n",
    "\n",
    "print(\"requirements.txt has been created!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1b55b984-b609-4aaa-9333-c8e13f5ae6d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "streamlit==1.32.0\n",
      "pandas==2.2.1\n",
      "matplotlib==3.8.3\n",
      "seaborn==0.13.2\n",
      "plotly==5.20.0\n",
      "scipy==1.12.0\n",
      "statsmodels==0.14.1\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Display the contents of requirements.txt\n",
    "with open(\"requirements.txt\", \"r\") as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "947dc014-fe01-45bc-b6af-72b54f4479b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Writing app.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile app.py\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "from scipy import stats\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Set a page config for better visuals\n",
    "st.set_page_config(page_title=\"Statistical Analysis\", layout=\"wide\")\n",
    "\n",
    "# Page Title\n",
    "st.markdown(\"<h1 style='text-align: center; color: #4CAF50;'>Statistical Analysis</h1>\", unsafe_allow_html=True)\n",
    "\n",
    "# Data upload\n",
    "uploaded_file = st.file_uploader(\"Upload your CSV file\", type=\"csv\")\n",
    "if uploaded_file is not None:\n",
    "    try:\n",
    "        data = pd.read_csv(uploaded_file)\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error loading the file: {e}\")\n",
    "    else:\n",
    "        # Show a sample of the dataframe using columns\n",
    "        st.markdown(\"### Data Preview\")\n",
    "        with st.expander(\"Expand to see the data\"):\n",
    "            st.write(data.head(10))\n",
    "\n",
    "    # Sidebar for analysis selection\n",
    "    with st.sidebar:\n",
    "        st.markdown(\"<h3 style='color: #4CAF50;'>Choose your Analysis:</h3>\", unsafe_allow_html=True)\n",
    "        analysis_type = st.selectbox(\n",
    "            'Select the type of analysis',\n",
    "            ('Basic Statistics', 'Basic Plots', 'Regression Analysis')\n",
    "        )\n",
    "\n",
    "        # Customization based on selected analysis type\n",
    "        if analysis_type == 'Basic Plots':\n",
    "            x_axis = st.selectbox('Select X-axis', data.columns)\n",
    "            y_axis = st.selectbox('Select Y-axis', data.columns)\n",
    "\n",
    "        # Variable selection for regression in the sidebar\n",
    "        if analysis_type == 'Regression Analysis':\n",
    "            st.markdown(\"#### Regression Variables\")\n",
    "            y_var = st.selectbox('Select Dependent Variable (y)', data.columns)\n",
    "            x_vars = st.multiselect('Select Independent Variable(s) (x)', data.columns)\n",
    "\n",
    "    # Column layout for visual appeal\n",
    "    col1, col2 = st.columns([1, 3])\n",
    "\n",
    "    # Show selections only for Basic Plots\n",
    "    if analysis_type == 'Basic Plots':\n",
    "        with col1:\n",
    "            st.markdown(\"### Your Selections\")\n",
    "            st.write(f\"**Analysis Type:** {analysis_type}\")\n",
    "            st.write(f\"**X-axis:** {x_axis}\")\n",
    "            st.write(f\"**Y-axis:** {y_axis}\")\n",
    "    \n",
    "    with col2:\n",
    "        # Generate visualizations based on user selection\n",
    "        if analysis_type == 'Basic Statistics':\n",
    "            with st.expander(\"Expand to view Basic Statistics\"):\n",
    "                st.markdown(\"#### Basic Statistics\")\n",
    "                st.write(data.describe())\n",
    "        \n",
    "        elif analysis_type == 'Basic Plots':\n",
    "            graph_type = st.selectbox(\n",
    "                'Select the type of graph you want to visualize:',\n",
    "                ('Bar Plot', 'Line Plot', 'Scatter Plot', 'Histogram', 'Box Plot')\n",
    "            )\n",
    "\n",
    "            if graph_type == 'Bar Plot':\n",
    "                st.markdown(\"#### Bar Plot\")\n",
    "                fig, ax = plt.subplots()\n",
    "                sns.barplot(x=data[x_axis], y=data[y_axis], ax=ax, palette=\"viridis\")\n",
    "                ax.set_xlabel(x_axis)\n",
    "                ax.set_ylabel(y_axis)\n",
    "                st.pyplot(fig)\n",
    "\n",
    "            elif graph_type == 'Line Plot':\n",
    "                st.markdown(\"#### Line Plot\")\n",
    "                fig, ax = plt.subplots()\n",
    "                sns.lineplot(x=data[x_axis], y=data[y_axis], ax=ax, palette=\"coolwarm\")\n",
    "                ax.set_xlabel(x_axis)\n",
    "                ax.set_ylabel(y_axis)\n",
    "                st.pyplot(fig)\n",
    "\n",
    "            elif graph_type == 'Scatter Plot':\n",
    "                st.markdown(\"#### Scatter Plot\")\n",
    "                scatter_plot = px.scatter(data, x=x_axis, y=y_axis, color=data.columns[0], hover_data=data.columns, color_continuous_scale='Bluered')\n",
    "                st.plotly_chart(scatter_plot)\n",
    "\n",
    "            elif graph_type == 'Histogram':\n",
    "                st.markdown(\"#### Histogram\")\n",
    "                num_bins = st.slider('Number of bins', min_value=5, max_value=50, value=10)\n",
    "                fig, ax = plt.subplots()\n",
    "                sns.histplot(data[x_axis], bins=num_bins, kde=True, ax=ax, color=\"skyblue\")\n",
    "                ax.set_xlabel(x_axis)\n",
    "                ax.set_ylabel('Frequency')\n",
    "                st.pyplot(fig)\n",
    "\n",
    "            elif graph_type == 'Box Plot':\n",
    "                st.markdown(\"#### Box Plot\")\n",
    "                fig, ax = plt.subplots()\n",
    "                sns.boxplot(x=data[x_axis], y=data[y_axis], ax=ax, palette=\"Set2\")\n",
    "                ax.set_xlabel(x_axis)\n",
    "                ax.set_ylabel(y_axis)\n",
    "                st.pyplot(fig)\n",
    "\n",
    "        elif analysis_type == 'Regression Analysis':\n",
    "            st.markdown(\"#### Linear Regression Analysis\")\n",
    "            \n",
    "            if x_vars:  # Only perform regression if x variables are selected\n",
    "                X = data[x_vars]\n",
    "                X = sm.add_constant(X)\n",
    "                y = data[y_var]\n",
    "\n",
    "                model = sm.OLS(y, X).fit()\n",
    "                predictions = model.predict(X)\n",
    "\n",
    "                # Display regression summary\n",
    "                st.write(model.summary())\n",
    "\n",
    "                # Plot if single independent variable is selected\n",
    "                if len(x_vars) == 1:\n",
    "                    fig, ax = plt.subplots()\n",
    "                    sns.regplot(x=data[x_vars[0]], y=data[y_var], ax=ax, scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\n",
    "                    ax.set_xlabel(x_vars[0])\n",
    "                    ax.set_ylabel(y_var)\n",
    "                    st.pyplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69cfd84a-00db-417a-a413-be29429e8eb3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
